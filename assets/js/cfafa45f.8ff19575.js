"use strict";(globalThis.webpackChunkvettrivel_com=globalThis.webpackChunkvettrivel_com||[]).push([[535],{4897:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"Java/branch-statements","title":"branch-statements","description":"These Statements allow you to create programs where decisions are taken based on the expression","source":"@site/docs/Java/04_branch-statements.md","sourceDirName":"Java","slug":"/Java/branch-statements","permalink":"/docs/Java/branch-statements","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Java/04_branch-statements.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"java-methods","permalink":"/docs/Java/java-methods"},"next":{"title":"For loop","permalink":"/docs/Java/for-loop-statement"}}');var a=s(4848),i=s(8453);const l={sidebar_position:4},c=void 0,o={},r=[{value:"<code>If</code> statement",id:"if-statement",level:2},{value:"Examples",id:"examples",level:3},{value:"<code>if else</code>  statement",id:"if-else--statement",level:2},{value:"Examples",id:"examples-1",level:3},{value:"Notes",id:"notes",level:3},{value:"<code>switch</code> case statement",id:"switch-case-statement",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"Usages of conditional statements",id:"usages-of-conditional-statements",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"These Statements allow you to create programs where decisions are taken based on the expression\nspecified in the statements"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"if"})," statement"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"if else"})," statement"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"switch"})," statement"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"if-statement",children:[(0,a.jsx)(n.code,{children:"If"})," statement"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"if"})," block is executed only when the ",(0,a.jsx)(n.code,{children:"if"})," expression is true otherwise, the ",(0,a.jsx)(n.code,{children:"if"}),"\nblock is skipped"]}),"\n",(0,a.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.p,{children:"Ex1:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'class Demo22{\n    public static void main(String[] args) {\n        int age = 16;\n        if(age < 18){\n            System.out.println("not eligible to vote");\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Ex2:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'class Demo23{\n    public static void main(String[] args) {\n        int age =16;\n        if(age < 18){\n            System.out.println("not eligible to vote");\n        }\n        age = age + 2;\n        System.out.println("Age of the persion is " + age);\n    }\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Note: In the above case only the block code of if statement\nis executed if the experession is true and the other \nstatements get executed as usual\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"if-else--statement",children:[(0,a.jsx)(n.code,{children:"if else"}),"  statement"]}),"\n",(0,a.jsx)(n.h3,{id:"examples-1",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'class Demo24{\n    public static void main(String[] args) {\n        int a =10, b =20;\n        if(a > b){\n            System.out.println("a is greater than b");\n        }else {\n            System.out.println("b is greater than a");\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'class Demo27{\n    public static void main(String[] args) {\n        int a = 10, b=20, c=30;\n        if(a > b && a > c){\n            System.out.println("a is greater than b and c");\n        }else if(b > a && b > c){\n            System.out.println("b is greater than a and c");\n        } else{\n            System.out.println("c is greater than a and b");\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["An ",(0,a.jsx)(n.code,{children:"if"})," statement can be used without an ",(0,a.jsx)(n.code,{children:"else"})," statement"]}),"\n",(0,a.jsxs)(n.li,{children:["Multiple ",(0,a.jsx)(n.code,{children:"if else"})," statements can be used in a program"]}),"\n",(0,a.jsxs)(n.li,{children:["Once an ",(0,a.jsx)(n.code,{children:"if else"})," statement causes an action in a program, then the remaining ",(0,a.jsx)(n.code,{children:"if else"})," statements will be ignored"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"switch-case-statement",children:[(0,a.jsx)(n.code,{children:"switch"})," case statement"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"switch"})," case statement is used to select an action from a given set of actions, based on a specified expression"]}),"\n",(0,a.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"    switch(expression/variables){\n        case value1 : statement1;\n        case value2 : statement2;\n        case value3 : statement3;\n        default : default_statement;\n    }   \n"})}),"\n",(0,a.jsxs)(n.p,{children:["the expression/variable in the above syntax can be any expression depicting a\n",(0,a.jsx)(n.code,{children:"char, byte, int or enum"})," variable. the switch case also support some wrapper class like\ninteger, byte and short"]}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"class Demo28{\n    public static void main(String[] args) {\n        char country='i';\n        switch(country){\n            case 'b' :\n                System.out.println(\"Brasil\");\n                break;\n            case 'n' :\n                System.out.println(\"New Zealand\");\n                break;\n            case 'i';\n                System.out.println(\"India\");\n                break;\n            default:\n                System.out.println(\"Invalid\");\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"usages-of-conditional-statements",children:"Usages of conditional statements"}),"\n",(0,a.jsxs)(n.p,{children:["When can we use ",(0,a.jsx)(n.code,{children:"if else"})," and ",(0,a.jsx)(n.code,{children:"switch"})," case?\n",(0,a.jsx)(n.code,{children:"if"})," Statements are used to evaluate boolean expression. A ",(0,a.jsx)(n.code,{children:"switch"})," statement allows\na variable to be tested for equality against a list of values. Each value is called as ",(0,a.jsx)(n.code,{children:"case"}),"\nand the variable being switched on is checked for each case"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["When we use range of values, relational operators or logical operators then we use ",(0,a.jsx)(n.code,{children:"if else"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["If we are using only values(list of values) then we go for ",(0,a.jsx)(n.code,{children:"switch"})," case."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var t=s(6540);const a={},i=t.createContext(a);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);