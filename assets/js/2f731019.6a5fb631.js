"use strict";(globalThis.webpackChunkvettrivel_com=globalThis.webpackChunkvettrivel_com||[]).push([[504],{7816:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Java/operators","title":"operators","description":"An Operator is a symbol that allows a program to perform certain operation (like arithmetic or logical)","source":"@site/docs/Java/02_operators.md","sourceDirName":"Java","slug":"/Java/operators","permalink":"/docs/Java/operators","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Java/02_operators.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"tokens-and-variables","permalink":"/docs/Java/tokens-and-variables"},"next":{"title":"java-methods","permalink":"/docs/Java/java-methods"}}');var a=t(4848),r=t(8453);const s={sidebar_position:2},o=void 0,l={},c=[{value:"Arithmetic operators",id:"arithmetic-operators",level:3},{value:"Assignment operators",id:"assignment-operators",level:3},{value:"Relational Operators",id:"relational-operators",level:3},{value:"Object equality",id:"object-equality",level:4},{value:"instance of operator",id:"instance-of-operator",level:3},{value:"Logical operators",id:"logical-operators",level:3},{value:"Unary Operators",id:"unary-operators",level:3}];function p(n){const e={code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"An Operator is a symbol that allows a program to perform certain operation (like arithmetic or logical)\non data and variables"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"1. Arithmetic (*, /, %, +, -, ++, --)\n2. Assignment (=, +=, -=, *=, /=, %=)\n3. Relational (==, !=, <, >, <=, >=)\n4. Instance of (instance of)\n5. Logical (&, &&, |, ||, ^, !)\n6. Conditional (?:)\n"})}),"\n",(0,a.jsx)(e.p,{children:"Depending on the no. of operands ,operator can be of the following three types"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Unary Operator: It takes one operand, such as ++x, y--. Here x and y are variables, while  ++ and -- are operators."}),"\n",(0,a.jsx)(e.li,{children:"Binary Operator: It takes two operands, such as x + y, x > y. Here x and y are while + and > are operators."}),"\n",(0,a.jsx)(e.li,{children:"Ternary Operator: It takes three operands. z = x > y ? x : y. Here x, y and z are variables while ?: is an operator"}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"arithmetic-operators",children:"Arithmetic operators"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Demo7{\n\n    public static void main(String[] args){\n        int i,j,k;\n        i = 30;\n        j = 20;\n        \n        k = i + j;\n        System.out.println("Addition of i and j is " + k);\n\n        k = i - j;\n        System.out.println("Diff of i and j is " + k);\n\n        k = i * j;\n        System.out.println("Product of i and j is " + k);\n\n        k = i / j;\n        System.out.println("Division of i and j is " + k);\n    }\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Demo08{\npublic static void main(String[] args){\nint num1 = 18;\nint num2 = 4;\nint quotient = num1 / num2;\nint remainder = num1 % num2;\n\n        System.out.println("num1 / num2 =  " + quotient);\n        System.out.println("num1 % num2 =  " + remainder);\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"assignment-operators",children:"Assignment operators"}),"\n",(0,a.jsx)(e.p,{children:"The equal(=) symbol is known as the assignment operator. The assignment operator(=) is used to store or assign a value to a variable."}),"\n",(0,a.jsx)(e.p,{children:"Eg:\nx = 10; // x stores 10\nx = x + 10; // x stores 20\nx = x + 5 * 20; // x stores 120\nx = (x + 5) * 20; // x stores 2500"}),"\n",(0,a.jsx)(e.p,{children:"In compound assignment operator we have +=, -=, *=, /= and %="}),"\n",(0,a.jsx)(e.p,{children:"Eg:\ni = 10 ; // i is initialized with the value 10\ni += 15; // i is compound assigned with 25 (i = i + 15)\ni -= 5; // i is compound assigned with 20 (i = i - 5)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"class Demo9{\n    public static void main(String[] args){\n        int i=2, j=3, k=4, l=25, m=7;\n\n        i += 25;\n        System.out.println(i);\n\n        j *= 6;\n        System.out.println(j);\n\n        k /= 2;\n        System.out.println(k);\n\n        l -= 10;\n        System.out.println(l);\n\n        m %= 5;\n        System.out.println(m);\n    \n    }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"relational-operators",children:"Relational Operators"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"    operator                Description\n\n    ==                  equal to\n    !=                  not equal to\n    <                   lesser than\n    >                   greater than\n    <=                  lesser than or equal to\n    >=                  greater than or equal to\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Demo10{\n    public static void main(String[] args){\n        int x = 5;\n        int y = 8;\n        int z = 10;\n        boolean b1 = x >= y;\n        boolean b2 = x >= y && z >=y;\n        \n        System.out.println("b1= " + b1 + " b2= " + b2);\n    }\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Demo11{\n    static int i=10;\n    static int j=20;\n\n    public static void main(String[] args){\n        if(i == j){\n            System.out.println("the values " + i + "and " + j + "are equal");\n        }\n        if(i !=j){\n            System.out.println("the values " + i + "and " + j + "are not equal");\n        }\n        if(i < j){\n            System.out.println("the value " + i + " is lesser than " + j);\n        }\n        if(i > j){\n            System.out.println("the value " + i + " is greater than " + j);\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h4,{id:"object-equality",children:"Object equality"}),"\n",(0,a.jsx)(e.p,{children:"The relational equality operator (==) and (!=) can also used to compare the reference of the two objects"}),"\n",(0,a.jsx)(e.p,{children:"obj1 == obj2 // means that ob1 and obj2 are equal and have same object reference"}),"\n",(0,a.jsx)(e.h3,{id:"instance-of-operator",children:"instance of operator"}),"\n",(0,a.jsx)(e.p,{children:"The instance of a operator is a binary operator that checks whether an object is of a particular type(here, type can be class, interface or an array).\nIt is used for object reference variable only"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Demo12{\n\n    public static void main(String[] args){\n        StringBuffer sb = new StringBuffer("Hello world");\n\n        if(sb instanceof StringBuffer){\n            System.out.println("sb is an instance of String buffer");\n        }else{\n            System.out.println("sb is not an instance of String Buffer");\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"logical-operators",children:"Logical operators"}),"\n",(0,a.jsx)(e.p,{children:"Logical operators are  && , ||, !, &, |.\nThe operators || and && evaluate only boolean values.\nThe not(!) operator returns the opposite of the current value of the boolean operand."}),"\n",(0,a.jsx)(e.p,{children:"Conditional operators or ternary operand:\nThe conditional operator (?:) is a ternary operator that takes three operands. It works similar to if-else statement."}),"\n",(0,a.jsx)(e.p,{children:"ex:\nint i=20, j=25;\nboolean test = false;\ntest = i > j ? true : false;"}),"\n",(0,a.jsx)(e.p,{children:"program:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"class Demo14{ \n    public static void main(String[] args){\n        int i = 20;\n        int j = 25;\n\n        boolean test = false;\n        test = i > j ? true :false;\n        System.out.println(test);\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"unary-operators",children:"Unary Operators"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"++   increment operator (post increment, pre increment)"}),"\n",(0,a.jsx)(e.li,{children:"--   decrement operator (post decrement, pre decrement)"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"    int x = 5;\n    int j;\n    j = x++;\n    j = ++x;\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class  Demo15{ \n    public static void main(String[] args){\n        System.out.println("Main starts");\n        int i = 0;\n        int j;\n        j = i++; // j = i; i=i+1;\n        System.out.println("i = " + i);\n        System.out.println("j = " + j);\n        System.out.println("Main ends");\n    }\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Demo16{\n    public static void main(String[] args){\n        System.out.println("Main starts");\n        int i=0;\n        int j=0;\n        System.out.println("i = " + i++);\n        System.out.println("i = " + i++);\n        System.out.println("i = " + i);\n        System.out.println("Main ends");\n    }\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Demo17{\n    public static void main(String[] args){\n        System.out.println("Main starts");\n        int i=0;\n        int j=0;\n        j = i + i++ + i + i++;\n        System.out.println("i = " + i);\n        System.out.println("j = " + j);\n        System.out.println("Main ends");\n    }\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Demo18{\n    public static void main(String[] args){\n        System.out.println("Main starts");\n        int i = 0;\n        int j = 0;\n        j = ++i;\n        System.out.println("i = " + i);\n        System.out.println("j = " + j);\n        System.out.println("Main ends");\n    }\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Demo19{\n    public static void main(String[] args){\n        System.out.println("Main starts");\n        int i = 0;\n        int j = 1;\n        int k = i + j++ + ++i + ++j + i++;\n        System.out.println("i = " + i);\n        System.out.println("j = " + j);\n        System.out.println("k = " + k);\n        System.out.println("Main ends");\n    }\n}\n'})})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var i=t(6540);const a={},r=i.createContext(a);function s(n){const e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);